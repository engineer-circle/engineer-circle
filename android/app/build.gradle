plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// release用のkey.propertiesを読み込む
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "com.engineercircle.engineer_circle"
    compileSdkVersion 33
    ndkVersion "25.1.8937393"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.engineercircle.engineer_circle"
        minSdkVersion 28
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        // dart_defines/{環境}.jsonで定義したappIdSuffix,appNameを指定する
        applicationIdSuffix appIdSuffix
        resValue "string", "app_name", appName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
        }
        release {
            minifyEnabled true
            debuggable false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation 'com.google.android.play:core:1.10.3'
}

// dart_definesで指定した環境に応じたgoogle-services.jsonをルートディレクトリにコピーするスクリプト
task selectGoogleServicesJson(type: Copy) {
    from "src/$flavor/google-services.json"
    into './'
}

// 新しいタスクが追加されるたびに実行されるスクリプト
tasks.configureEach { task ->
    if (task.name == 'mapDebugSourceSetPaths') {
        task.dependsOn processDebugGoogleServices
    }

    if (task.name in [
        'mapReleaseSourceSetPaths', 'mergeReleaseResources',
    ]) {
        task.dependsOn processReleaseGoogleServices
    }

    if (task.name in [
        'processDebugGoogleServices', 'compileFlutterBuildDebug', 'mergeDebugAssets',
        'mergeDebugShaders', 'extractDeepLinksDebug', 'mergeDebugJniLibFolders',

        'processReleaseGoogleServices', 'compileFlutterBuildRelease', 'mergeReleaseAssets',
        'mergeReleaseShaders','extractDeepLinksRelease', 'mergeReleaseJniLibFolders',
    ]) {
        // 実行をselectGoogleServicesJsonに依存させる
        task.dependsOn selectGoogleServicesJson
    }
}
